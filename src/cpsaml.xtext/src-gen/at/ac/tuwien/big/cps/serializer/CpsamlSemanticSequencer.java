/*
 * generated by Xtext 2.22.0
 */
package at.ac.tuwien.big.cps.serializer;

import at.ac.tuwien.big.cps.services.CpsamlGrammarAccess;
import com.google.inject.Inject;
import cpsaml.Actuator;
import cpsaml.Command;
import cpsaml.CpsSystem;
import cpsaml.CpsamlPackage;
import cpsaml.MultiCps;
import cpsaml.Resource;
import cpsaml.Sensor;
import cpsaml.SingletonCps;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class CpsamlSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CpsamlGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CpsamlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CpsamlPackage.ACTUATOR:
				sequence_Actuator(context, (Actuator) semanticObject); 
				return; 
			case CpsamlPackage.COMMAND:
				if (rule == grammarAccess.getInlineDescCommandRule()) {
					sequence_InlineDescCommand(context, (Command) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCommandRule()) {
					sequence_InlineDescCommand_TopDescCommand(context, (Command) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTopDescCommandRule()) {
					sequence_TopDescCommand(context, (Command) semanticObject); 
					return; 
				}
				else break;
			case CpsamlPackage.CPS_SYSTEM:
				if (rule == grammarAccess.getInlineDescSystemRule()) {
					sequence_InlineDescSystem(context, (CpsSystem) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCpsSystemRule()) {
					sequence_InlineDescSystem_TopDescSystem(context, (CpsSystem) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTopDescSystemRule()) {
					sequence_TopDescSystem(context, (CpsSystem) semanticObject); 
					return; 
				}
				else break;
			case CpsamlPackage.MULTI_CPS:
				sequence_MultiCps(context, (MultiCps) semanticObject); 
				return; 
			case CpsamlPackage.RESOURCE:
				if (rule == grammarAccess.getInlineDescResourceRule()) {
					sequence_InlineDescResource(context, (Resource) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getResourceRule()) {
					sequence_InlineDescResource_TopDescResource(context, (Resource) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTopDescResourceRule()) {
					sequence_TopDescResource(context, (Resource) semanticObject); 
					return; 
				}
				else break;
			case CpsamlPackage.SENSOR:
				sequence_Sensor(context, (Sensor) semanticObject); 
				return; 
			case CpsamlPackage.SINGLETON_CPS:
				sequence_SingletonCps(context, (SingletonCps) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Hardware returns Actuator
	 *     Actuator returns Actuator
	 *
	 * Constraint:
	 *     (description=ML_DESCRIPTION? name=Name (instances+=Name instances+=Name*)? commands+=Command*)
	 */
	protected void sequence_Actuator(ISerializationContext context, Actuator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InlineDescCommand returns Command
	 *
	 * Constraint:
	 *     (name=Name description=SL_DESCRIPTION)
	 */
	protected void sequence_InlineDescCommand(ISerializationContext context, Command semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CpsamlPackage.Literals.DESCRIBED_NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CpsamlPackage.Literals.DESCRIBED_NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, CpsamlPackage.Literals.DESCRIBED_NAMED_ELEMENT__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CpsamlPackage.Literals.DESCRIBED_NAMED_ELEMENT__DESCRIPTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInlineDescCommandAccess().getNameNameParserRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInlineDescCommandAccess().getDescriptionSL_DESCRIPTIONTerminalRuleCall_3_0(), semanticObject.getDescription());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Command
	 *
	 * Constraint:
	 *     ((description=ML_DESCRIPTION? name=Name) | (name=Name description=SL_DESCRIPTION))
	 */
	protected void sequence_InlineDescCommand_TopDescCommand(ISerializationContext context, Command semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InlineDescResource returns Resource
	 *
	 * Constraint:
	 *     (name=Name description=SL_DESCRIPTION?)
	 */
	protected void sequence_InlineDescResource(ISerializationContext context, Resource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Resource returns Resource
	 *
	 * Constraint:
	 *     ((description=ML_DESCRIPTION name=Name) | (name=Name description=SL_DESCRIPTION?))
	 */
	protected void sequence_InlineDescResource_TopDescResource(ISerializationContext context, Resource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InlineDescSystem returns CpsSystem
	 *
	 * Constraint:
	 *     (name=Name description=SL_DESCRIPTION? (cps+=Cps | commands+=Command)*)
	 */
	protected void sequence_InlineDescSystem(ISerializationContext context, CpsSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CpsSystem returns CpsSystem
	 *
	 * Constraint:
	 *     (
	 *         (description=ML_DESCRIPTION name=Name (cps+=Cps | commands+=Command)*) | 
	 *         (name=Name description=SL_DESCRIPTION? (cps+=Cps | commands+=Command)*)
	 *     )
	 */
	protected void sequence_InlineDescSystem_TopDescSystem(ISerializationContext context, CpsSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Cps returns MultiCps
	 *     MultiCps returns MultiCps
	 *
	 * Constraint:
	 *     (description=ML_DESCRIPTION? name=Name (instances+=Name instances+=Name*)? (commands+=Command | resources+=Resource | hardware+=Hardware)*)
	 */
	protected void sequence_MultiCps(ISerializationContext context, MultiCps semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Hardware returns Sensor
	 *     Sensor returns Sensor
	 *
	 * Constraint:
	 *     (description=ML_DESCRIPTION? name=Name (instances+=Name instances+=Name*)? resources+=Resource*)
	 */
	protected void sequence_Sensor(ISerializationContext context, Sensor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Cps returns SingletonCps
	 *     SingletonCps returns SingletonCps
	 *
	 * Constraint:
	 *     (description=ML_DESCRIPTION? name=Name (commands+=Command | resources+=Resource | hardware+=Hardware)*)
	 */
	protected void sequence_SingletonCps(ISerializationContext context, SingletonCps semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TopDescCommand returns Command
	 *
	 * Constraint:
	 *     (description=ML_DESCRIPTION? name=Name)
	 */
	protected void sequence_TopDescCommand(ISerializationContext context, Command semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TopDescResource returns Resource
	 *
	 * Constraint:
	 *     (description=ML_DESCRIPTION name=Name)
	 */
	protected void sequence_TopDescResource(ISerializationContext context, Resource semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CpsamlPackage.Literals.DESCRIBED_NAMED_ELEMENT__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CpsamlPackage.Literals.DESCRIBED_NAMED_ELEMENT__DESCRIPTION));
			if (transientValues.isValueTransient(semanticObject, CpsamlPackage.Literals.DESCRIBED_NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CpsamlPackage.Literals.DESCRIBED_NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTopDescResourceAccess().getDescriptionML_DESCRIPTIONTerminalRuleCall_1_0(), semanticObject.getDescription());
		feeder.accept(grammarAccess.getTopDescResourceAccess().getNameNameParserRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TopDescSystem returns CpsSystem
	 *
	 * Constraint:
	 *     (description=ML_DESCRIPTION name=Name (cps+=Cps | commands+=Command)*)
	 */
	protected void sequence_TopDescSystem(ISerializationContext context, CpsSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
